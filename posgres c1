-- setup_database.sql

-- Drop existing tables in reverse order of dependency to avoid foreign key errors
DROP TABLE IF EXISTS feedback;
DROP TABLE IF EXISTS tasks;
DROP TABLE IF EXISTS goals;
DROP TABLE IF EXISTS users;

-- Create the USERS table
CREATE TABLE users (
    user_id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    role VARCHAR(50) NOT NULL CHECK (role IN ('Manager', 'Employee')),
    manager_id INTEGER REFERENCES users(user_id)
);

-- Create the GOALS table
CREATE TABLE goals (
    goal_id SERIAL PRIMARY KEY,
    assigned_to INTEGER NOT NULL REFERENCES users(user_id),
    assigned_by INTEGER NOT NULL REFERENCES users(user_id),
    description TEXT NOT NULL,
    due_date DATE NOT NULL,
    status VARCHAR(50) NOT NULL DEFAULT 'Draft' CHECK (status IN ('Draft', 'In Progress', 'Completed', 'Cancelled'))
);

-- Create the TASKS table
CREATE TABLE tasks (
    task_id SERIAL PRIMARY KEY,
    goal_id INTEGER NOT NULL REFERENCES goals(goal_id) ON DELETE CASCADE,
    description TEXT NOT NULL,
    status VARCHAR(50) NOT NULL DEFAULT 'Pending Approval' CHECK (status IN ('Pending Approval', 'Approved', 'Completed'))
);

-- Create the FEEDBACK table
CREATE TABLE feedback (
    feedback_id SERIAL PRIMARY KEY,
    goal_id INTEGER NOT NULL REFERENCES goals(goal_id) ON DELETE CASCADE,
    manager_id INTEGER NOT NULL REFERENCES users(user_id),
    employee_id INTEGER NOT NULL REFERENCES users(user_id),
    feedback_text TEXT NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    is_automated BOOLEAN NOT NULL DEFAULT FALSE
);

-- Create a function for the automated feedback trigger
CREATE OR REPLACE FUNCTION log_goal_completion_feedback()
RETURNS TRIGGER AS $$
BEGIN
    -- Check if the goal status is updated to 'Completed'
    IF NEW.status = 'Completed' AND OLD.status != 'Completed' THEN
        INSERT INTO feedback (goal_id, manager_id, employee_id, feedback_text, is_automated)
        VALUES (NEW.goal_id, NEW.assigned_by, NEW.assigned_to, 'System: Goal "' || NEW.description || '" was marked as completed. Well done!', TRUE);
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create the trigger on the GOALS table
CREATE TRIGGER goal_completed_trigger
AFTER UPDATE ON goals
FOR EACH ROW
EXECUTE FUNCTION log_goal_completion_feedback();

-- Insert Sample Data
-- Managers
INSERT INTO users (name, role, manager_id) VALUES ('Alice Manager', 'Manager', NULL);
INSERT INTO users (name, role, manager_id) VALUES ('Bob Manager', 'Manager', NULL);

-- Employees
INSERT INTO users (name, role, manager_id) VALUES ('Charlie Employee', 'Employee', 1);
INSERT INTO users (name, role, manager_id) VALUES ('David Employee', 'Employee', 1);
INSERT INTO users (name, role, manager_id) VALUES ('Eve Employee', 'Employee', 2);

-- Sample Goal
INSERT INTO goals (assigned_to, assigned_by, description, due_date, status) VALUES (3, 1, 'Develop Q3 Sales Report', '2025-09-30', 'In Progress');
INSERT INTO tasks (goal_id, description, status) VALUES (1, 'Gather sales data from all regions', 'Approved');
INSERT INTO tasks (goal_id, description, status) VALUES (1, 'Analyze regional performance', 'Pending Approval');
INSERT INTO feedback (goal_id, manager_id, employee_id, feedback_text) VALUES (1, 1, 3, 'Great start on the Q3 report. Let''s connect about the data sources.');
